syntax = 'proto3';

package types;

option go_package = "github.com/FigureTechnologies/provenance-blockchain/pkg/proto/types;types";
option java_package = "io.provenance.pbc.proto.types";
option java_outer_classname = "TypesProtos";

// Wrapper for an ISO8601 date string. EX: "2020-05-22"
message Date {
    string value = 1;
}

// Wrapper type for a standard uuid.
message UUID {
    string value = 1;
}

// Wrap a boolean result type.
message BooleanResult {
    bool value = 1;
}

// Wrap a location.
message Location {
    types.ProvenanceReference ref = 1;
    string classname = 2;
}

// Wrap a factual data element.
message Fact {
    string name = 1;
    types.Location data_location = 2;
}

message ProvenanceReference {
    // [Req] [Scope.uuid]
    // Scope ID
    types.UUID scope_uuid = 1;
    // [Opt] [RecordGroup.group_uuid]
    // require record to be within a specific group
    types.UUID group_uuid = 2;
    // [Opt] [Record.result_hash]
    // specify a specific record inside a scope (and group) by result-hash
    string hash = 3;
    // [Opt] [Record.result_name]
    // specify a result-name of a record within a scope
    string name = 4;
}

// Wrapper around a standard signature.
message Signature {
    // Signature Detail
    string algo = 1;
    string provider = 2;
    string signature = 3;

    // Identity of signer
    types.SigningAndEncryptionPublicKeys signer = 4;
}

// A collection of signatures
message SignatureSet {
    repeated Signature signatures = 1;
}

enum PublicKeyType {
    ELLIPTIC = 0;
}
  
enum PublicKeyCurve {
    SECP256K1 = 0;
    P256 = 1;
}

message PublicKey {
    bytes public_key_bytes = 1;
    PublicKeyType type = 2;
    PublicKeyCurve curve = 3;
}

message SigningAndEncryptionPublicKeys {
    types.PublicKey signing_public_key = 1;
    types.PublicKey encryption_public_key = 2;
}
