buildscript {
    rootProject.apply {
        from(rootProject.file("versions.gradle"))
    }
    ext {
        springboot_version = '2.3.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springboot_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
    }
}

plugins {
    id 'com.google.protobuf'
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.google.osdetector"
apply plugin: 'jacoco'
apply plugin: 'de.undercouch.download'

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

sourceSets {
    main {
        java {
            srcDirs += 'src/main/kotlin'
        }
        proto {
            srcDir "src/main/proto"
        }
    }
    test {
        java {
            srcDirs += 'src/test/kotlin'
        }
        proto {
            srcDir "src/main/proto"
        }
    }
}

configurations.all {
    // This is brought in by the object store client... We don't want figure dependencies in the p8e-api.
    exclude group: 'com.figure', module: 'figure-util'
}

dependencies {
    implementation project(":p8e-common")
    implementation project(":p8e-encryption")
    implementation project(":p8e-engine")
    implementation project(":p8e-index-domain")
    implementation project(":p8e-proto-internal")
    implementation project(":p8e-contract-base")
    implementation project(":p8e-util")
    implementation project(":p8e-shared")
    implementation project(":simple-client")
    implementation project(":event-stream")
    implementation project(":os-client")
    implementation project(":mailbox-client")

    // Ketherium utilities
    implementation "com.github.komputing:kbip44:0.1"
    implementation "com.github.komputing:kbase58:0.1"
    implementation "com.github.komputing.khex:core:$khex_version"
    implementation "com.github.komputing.khex:extensions:$khex_version"
    implementation "com.github.komputing.kethereum:bip32:$kethereum_version"
    implementation "com.github.komputing.kethereum:bip39:$kethereum_version"
    implementation "com.github.komputing.kethereum:model:$kethereum_version"
    implementation "com.github.komputing.kethereum:extensions_kotlin:$kethereum_version"
    implementation "com.github.komputing.kethereum:crypto:$kethereum_version"
    implementation "com.github.komputing.kethereum:crypto_api:$kethereum_version"
    implementation "com.github.komputing.kethereum:crypto_impl_bouncycastle:$kethereum_version"

    implementation "com.auth0:java-jwt:$jwt_version"

    // Elasticsearch Things
    implementation "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticsearch_version"
    implementation "org.elasticsearch.client:elasticsearch-rest-client:$elasticsearch_version"
    implementation "org.elasticsearch:elasticsearch:$elasticsearch_version"

    // Feign Things
    implementation 'io.github.openfeign:feign-jackson:10.12'
    implementation 'io.github.openfeign:feign-httpclient:10.12'

    // GRPC
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation("io.grpc:grpc-netty:$grpc_version") {
        force true
    }
    implementation("io.netty:netty-handler:4.1.48.Final") {
        force true
    }

    if (osdetector.os == 'macos' || osdetector.os == 'freebsd') {
        implementation('io.netty:netty-transport-native-kqueue:4.1.50.Final:osx-x86_64')
    } else if (osdetector.os == 'linux') {
        implementation('io.netty:netty-transport-native-epoll:4.1.50.Final:linux-x86_64')
    }

    // WebSocket
    implementation "com.tinder.scarlet:scarlet:$scarlet_version"
    implementation "com.tinder.scarlet:websocket-okhttp:$scarlet_version"
    implementation "com.tinder.scarlet:stream-adapter-rxjava2:$scarlet_version"
    implementation "com.tinder.scarlet:message-adapter-moshi:$scarlet_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.0'

    // Spring boot
    implementation "org.springframework.boot:spring-boot-starter-web:$springboot_version"
    implementation "org.springframework.boot:spring-boot-starter-integration:$springboot_version"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springboot_version"
    implementation 'io.github.lognet:grpc-spring-boot-starter:3.4.3'
    implementation "org.springframework.boot:spring-boot-starter-validation:$springboot_version"

    // This compile is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:23.0'

    // Just SQL Things
    implementation "org.postgresql:postgresql:$postgres_version"
    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation 'com.zaxxer:HikariCP:3.4.2'

    // Redis
    implementation "org.redisson:redisson:$redisson_version"

    // Swagger
    implementation 'io.springfox:springfox-swagger2:2.7.0'
    implementation 'io.springfox:springfox-swagger-ui:2.7.0'

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'

    // DataDog
    implementation "com.datadoghq:java-dogstatsd-client:$datadog_version"

    // Test Things
    testImplementation 'io.grpc:grpc-testing:1.35.0'
    testImplementation 'com.h2database:h2:1.4.200'

    // grpc for provenance proto compilation
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.protobuf:protobuf-java-util:$protobuf_version"
    implementation group: 'io.grpc', name: 'grpc-stub', version: "$grpc_version"
    implementation group: 'io.grpc', name: 'grpc-protobuf', version: "$grpc_version"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

def profiles = System.getenv("SPRING_PROFILES_ACTIVE") ?: "development"
bootRun {
    args = ["--spring.profiles.active=$profiles"]
}

springBoot {
    mainClassName = 'io.provenance.engine.ApplicationKt'
}

dependencyManagement {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

task downloadZipFile(type: Download) {
    src "https://github.com/provenance-io/provenance/releases/download/v${provenance_version}/protos-v${provenance_version}.zip"
    dest new File(buildDir, "${provenance_version}.zip")
    onlyIfModified true
}

task downloadAndUnzipFile(dependsOn: downloadZipFile, type: Copy) {
    from zipTree(downloadZipFile.dest)
    into 'src/main'
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc {}
        }
    }
}
